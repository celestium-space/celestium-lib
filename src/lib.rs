pub mod block;
pub mod blockchain;
pub mod serialize;
pub mod transaction;
pub mod universal_id;
pub mod user;
pub mod wallet;

#[cfg(test)]
mod tests {
    use crate::wallet::Wallet;

    static BLOCKCHAIN_BIN: [u8; 315] = [
        0x83, 0x41, 0x03, 0xCE, 0xBF, 0xB2, 0x04, 0x8E, 0xC9, 0x8D, 0xFC, 0xAF, 0xD5, 0x64, 0x91,
        0xA3, 0x21, 0xDA, 0x25, 0xD2, 0x2C, 0xD9, 0x62, 0xE8, 0x9F, 0x51, 0xFB, 0xF3, 0xCC, 0x98,
        0x21, 0x68, 0x6E, 0x5A, 0x9D, 0x03, 0x54, 0xE9, 0x7E, 0x35, 0x3A, 0xC8, 0x96, 0x93, 0x76,
        0xFB, 0xA4, 0xA7, 0x87, 0x49, 0x90, 0xE7, 0x67, 0xDD, 0x89, 0x81, 0xB0, 0xF2, 0x47, 0xA3,
        0xC8, 0xA5, 0x99, 0xEA, 0x9D, 0x19, 0x64, 0x86, 0x00, 0x01, 0x90, 0x0A, 0x03, 0x41, 0x03,
        0x54, 0xE9, 0x7E, 0x35, 0x3A, 0xC8, 0x96, 0x93, 0x76, 0xFB, 0xA4, 0xA7, 0x87, 0x49, 0x90,
        0xE7, 0x67, 0xDD, 0x89, 0x81, 0xB0, 0xF2, 0x47, 0xA3, 0xC8, 0xA5, 0x99, 0xEA, 0x9D, 0x19,
        0x64, 0x86, 0x03, 0xCE, 0xBF, 0xB2, 0x04, 0x8E, 0xC9, 0x8D, 0xFC, 0xAF, 0xD5, 0x64, 0x91,
        0xA3, 0x21, 0xDA, 0x25, 0xD2, 0x2C, 0xD9, 0x62, 0xE8, 0x9F, 0x51, 0xFB, 0xF3, 0xCC, 0x98,
        0x21, 0x68, 0x6E, 0x5A, 0x9D, 0x00, 0x01, 0xF4, 0x19, 0x96, 0x9A, 0xEC, 0x18, 0xF2, 0x14,
        0x6A, 0xDC, 0x3F, 0x2A, 0x43, 0x22, 0x63, 0x07, 0x8E, 0xB4, 0xC8, 0x40, 0x1C, 0xFA, 0xD1,
        0xD1, 0x0D, 0x4F, 0x2C, 0xD5, 0xA3, 0x07, 0x06, 0x8A, 0x03, 0x53, 0x0D, 0x6F, 0x93, 0xB7,
        0x7E, 0x1D, 0xD5, 0xB5, 0x71, 0xE8, 0x8D, 0xDB, 0x32, 0xCD, 0x4E, 0x31, 0x14, 0x7B, 0x1E,
        0x1A, 0xA9, 0x2E, 0x58, 0x77, 0xF5, 0xAA, 0x11, 0xDB, 0x30, 0x52, 0x50, 0x5A, 0x68, 0x97,
        0x7B, 0x99, 0x62, 0x6E, 0xE5, 0x5F, 0x16, 0xD6, 0x32, 0xCC, 0xD1, 0x6D, 0x0D, 0xE1, 0xDA,
        0x83, 0xC5, 0x24, 0xD8, 0x1F, 0xB7, 0x8F, 0x02, 0x67, 0xF3, 0x8A, 0x85, 0x43, 0x0F, 0x2D,
        0x79, 0xDC, 0x00, 0x85, 0x51, 0x08, 0x40, 0x65, 0x2F, 0x40, 0xC4, 0x7F, 0x42, 0x0E, 0x7C,
        0x24, 0xF4, 0x14, 0x5B, 0x4F, 0x1E, 0xB3, 0x0C, 0x83, 0xF6, 0x04, 0x81, 0xBD, 0x7B, 0x6A,
        0x23, 0xB8, 0xEF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x03, 0xCE, 0xBF, 0xB2, 0x04, 0x8E, 0xC9,
        0x8D, 0xFC, 0xAF, 0xD5, 0x64, 0x91, 0xA3, 0x21, 0xDA, 0x25, 0xD2, 0x2C, 0xD9, 0x62, 0xE8,
        0x9F, 0x51, 0xFB, 0xF3, 0xCC, 0x98, 0x21, 0x68, 0x6E, 0x5A, 0x9D, 0x13, 0x37, 0x00, 0x00,
    ];
    static PK_BIN: [u8; 33] = [
        0x03, 0xCE, 0xBF, 0xB2, 0x04, 0x8E, 0xC9, 0x8D, 0xFC, 0xAF, 0xD5, 0x64, 0x91, 0xA3, 0x21,
        0xDA, 0x25, 0xD2, 0x2C, 0xD9, 0x62, 0xE8, 0x9F, 0x51, 0xFB, 0xF3, 0xCC, 0x98, 0x21, 0x68,
        0x6E, 0x5A, 0x9D,
    ];
    static SK_BIN: [u8; 32] = [
        0xA2, 0x66, 0xBD, 0xA6, 0xEE, 0xB5, 0x3C, 0x88, 0x7A, 0xB7, 0x0E, 0x9F, 0xAC, 0x49, 0x6F,
        0x58, 0x7B, 0x53, 0x19, 0x76, 0xA9, 0xE4, 0xFA, 0x85, 0x21, 0xC5, 0x90, 0x77, 0x05, 0x85,
        0xC5, 0x17,
    ];

    #[test]
    fn parse_blockchain() {
        Wallet::from_binary(BLOCKCHAIN_BIN.to_vec(), PK_BIN.to_vec(), SK_BIN.to_vec()).unwrap();
    }

    #[test]
    fn parse_users() {
        let wallet =
            Wallet::from_binary(BLOCKCHAIN_BIN.to_vec(), PK_BIN.to_vec(), SK_BIN.to_vec()).unwrap();
        let users = wallet.get_users().unwrap();
        assert_eq!(users.len(), 2);
    }

    #[test]
    fn get_wallet_balance() {
        let balance =
            Wallet::from_binary(BLOCKCHAIN_BIN.to_vec(), PK_BIN.to_vec(), SK_BIN.to_vec())
                .unwrap()
                .get_balance()
                .unwrap();
        assert_eq!(balance, 475);
    }
}
